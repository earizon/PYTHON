https://arxiv.org/pdf/1906.07221.pdf

● Intuitive idea:
  if prover claims to know some polynomial (also known to verifier), 
  they can follow next simple protocol to verify the statement:
  • Verifier) evaluate polynomial around random 'x'
  • Verifier) share 'x' to prover, ask him to evaluate pol('x') 
  •   Prover) evaluate polynomial locally around random 'x' give it back to verifier. 
  • Verifier) checks results match. 

● Trusted-prover Zero knowledge: 
  • verifier doesn't want to reveal original polinomial, only that 
    original polynomial p(x) -not revealed- is like:
    p(x) = t(x)·h(x) ; t(x): target polynomial    (1 co-factor  of p)
                       h(x): arbitrary polynomial (N co-factors of p)

    or "p(x) contains all the roots of t(x)" arbitrary polynomial 
       └─── THE VERY THING TO BE PROVEN ───┘

    Now the protocol looks like:
    • Verifier knows t(x) ("target prolynomial")
      Prover   knows t(x), p(x)
    • Verifier) · evaluate t(r) around random 'r'. 
                · share t(r) with prover
                · ask prover to evaluate t(r)
    • Prover  ) calculate h(x) = p(x)/t(x), keeping h(x) private
                calculate h(r)   p(r)
                share     h(r)   p(r) with verifier.
      WARN: Trusted setup. Prover is fair, not lying about h(r),p(r).
    • Verifier) check p(r) == t(t) · h(r) ?
      Verifier still doesn't know p(x), just a random point p(r)

   ┌─ HOMOMORPHIC ENCRYPTION ───────────────────────────────────────
   │ STEP 1) Map ops:
   │                    ┌ 5: g(enerator), arbitrary constant
   │   3+2 = 5  ◁╶╶╶╶▷  5³·5²  = 5²⁺³ 
   │   3-2 = 1  ◁╶╶╶╶▷  5³/5²  = 5²⁻³ 
   │   3·2 = 6  ◁╶╶╶╶▷ ( 5³ )² = 5²·³ 
   │   3^2 = 9  ◁╶╶╶╶▷ FAIL!!!: Spoiler: Bilinear pairs fix it
   │                   ax³ +bx² + cx must be provided with
   │                   x₀³,x₀² pre-calculated in original group,
   │                   to calculate: 5^(a·x₀³ +b·x₀² + c·x₀)
   │   ┌╶╶╶  5ⁿ╶╶╶┐    ┌╶╶╶ 5ⁿ ╶╶╶┐
   │   △          ▽    △          ▽
   │   n          5ⁿ   n          5ⁿ
   │   △          ▽                
   │   └╶╶ lg₅n ╶╶┘                   
   │   n continuous      n modular
   │ 
   │ STEP 2) Use modular arithmetic, it is STIPULATED (not proven)
   │         that logₐ is difficult/impossible to be calculated,
   │         for big prime numbers.
   │   3+2 = 5  ╶╶╶╶╶▷  5³·5²  = 5²⁺³ (mod 7)
   │   3─2 = 1  ╶╶╶╶╶▷  5³/5²  = 5²⁻³ (mod 7)
   │   3·2 = 6  ╶╶╶╶╶▷ ( 5³ )² = 5²·³ (mod 7)
   └───────────────────────────────────────────────────────────────

● Trusted-prover in homomorphic ZK protocol: 
  • Verifier
    • sample random x₀='s' (secret)
    • pre-calculate g^s⁰,g^s¹, g^s², ... g^sⁿ 
    • calculate t(s) ("target polynomial" at random secret)
    • share g^s⁰,g^s¹, g^s², ... g^sⁿ with prover.
  • Prover: (He doesn't know original 's' anymore, 
    but he can still ignore input from verifier,
    compute new random 'r'... replicate Verifier step
    1 and return result aplying to fake p').
    • calculate polynomial 
      h(x) = p(x)/t(x) = c₀x⁰+c₁s¹+...+cₘxⁿ 
    • calculate h(s) = c₀s⁰+c₁s¹+...+cₘsⁿ in homeomorphic group:
      (sums become multiplications, and multiplications become powers)
      g^(c₀·s⁰)·g^(c₁·s¹)·...·g^(cₘ·sⁿ)
    • share h(s) to verifier.
  • Verifier:
    • check p(s) = t(s) · h(s) in encrypted space:
      g^p = (g^h)^t(s) = g^( t(s)·h )

● non-Trusted-prover in homomorphic ZK protocol: 
  • Verifier)
    • select random 's' and a "shifted" 'αs'.
    • share   g^s⁰ , g^s¹  ...  g^sⁿ and
              g^αs⁰, g^αs¹  ... g^αsⁿ with prover
  • Prover)
    • Repeat steps in previous protocol for s,αs.
    • Share g^p(s), g^p(αs)

  • Verifier)
    • Check (g^p(s))^α = (g^p(α))

 PENDING PROBLEM 1: C₀,C₁,..Cₙ are quite small allowing
 for brute-force attacks. The protocol must be secure
 even for polynomial with a single coeficient.

 PENDING PROBLEM 2: The protocol is interactive and 
 verifier must "stay online" and repeat from scratch for
 each new prover (since prover could share its results
 with other fake provers).

● non-Trusted-prover NON-INTERACTIVE in homomorphic ZK protocol: 
  PROBLEM: We want somehow secure the secrets (t(s), α)
    after they are produced, BUT homomorphic encryption used does 
    NOT SUPPORT multiplication of encrypted values, necessary for
    both verification checks: [ t(s) * h , p * α].

  SOLUTION: CRYPTOGRAPHIC PAIRINGS (bilinear maps):
    e(g^a, g^b) ╶╶╶╶╶▷ e (g,g)^ab  ← NOTE: In practice we use
                                   generators in Ellip.Curves.

    KEY-POINT: The ouput of pairing is an HOMOMORPHIC ENCRYPTED
    PRODUCT OF RAW VALUES under a different generator g of the
    target set, i.e., e(g^a, g^b) = g^ab.
    NOTE: Output group ("target set") is different from input
          group, so pairings can not be concatenated.
    · Being homorphic means that we can add the encrypted products 
      of multiple pairings together:
      e(g^a, g^b) = e(g^b,g^a) = e(g^ab, g^1) = e(g^1,g^ab) =
      = e(g^1,g^a)^b = e(g, g)^ab  = ...

  • Verifier)
    • select random 's' and "shifted" 'αs'.

    • calc.   g^s⁰ , g^s¹  ...  g^sⁿ and
              g^αs⁰, g^αs¹  ... g^αsⁿ with prover
                       
    • delete random 's' and "shifted" 'αs'.

