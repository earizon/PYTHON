## Exodia [[{qa.101]]
  https://github.com/LeOndaz/exodia

  library heavily inspired by Yup & Joi (JavaScript)

  Example code:

  | import exodia as ex
  |
  | class Person:
  |     first_name = ex.String().required().max(250)
  |     last_name = ex.String().required().max(250)
  |     age = ex.Integer().required().min(18)
  |
  |
  | child = Person()
  | child.first_name = None  # throws exception
  | child.first_name = 12    # throws exception
  |
  | child.first_name = "".join([i for i in range(250 + 1)])  # exception
  |
  | child.age = 12  # error, must be more than 18!
[[}]]

## Difference between Module, packages and libraries in Python: [[{DevOps.101]]
https://medium.com/swlh/what-is-the-difference-between-a-module-a-package-a-library-and-a-dependency-b09ca8e83ce7
[[}]]

## Pyline (UNIX/text-utils like) [[{text_processing,01_PM.TODO.@ma]]
 @[pyline_and_pipes]
@[https://pypi.org/project/pyline/]
Pyline is a grep-like, sed-like, awk-like command-line tool for
line-based text processing in Python.

ls | pyline -m os 'line and os.path.abspath(line.strip())'
ls | pyline -r '\(.*\)' 'rgx and (rgx.group(0), rgx.group(1)) or line'
ls | pyline -p 'p and p.abspath() or ("# ".format(line))'

With an extra outer loop to bind variables in
(because (_p = p.abspath(); <codeobj>) does not work)
find $PWD | pyline --pathpy -m os -m collections --input-delim='/' \
    'p and [collections.OrderedDict((
            ("p", p),
            ("_p", _p),
            ("_p.split()", str(_p).split(os.path.sep)),
            ("line.rstrip().split()", line.rstrip().split(os.path.sep)),
            ("l.split()", l.split(os.path.sep)),
            ("words", words),
            ("w", w)))
        for _p in [p.abspath()]][0]' \
       -O json
[[}]]

## python-pipes Streaming Framework [[{]]
  https://github.com/gibiansky/python-pipes

  A streaming framework in Python, roughly inspired by the Haskell pipes library.

  The module is in pipes.py.

  This module defines a library for streaming operations, composed
  using the >> operator. This allows for easy to read and write shell-like pipelines, such as:

  # Count the number of lines on standard input.
  num_lines = cat("/dev/stdin") >> count()
  # Count the number of unique values in the 3rd column.
  # Return a counter of values, e.g. {"a": 10, "b": 3}.
  counts = cat("/dev/stdin") >> column(3) >> uniques
[[}]]

## TinyP2P [[{io.p2p,io.networking]]
  # tinyp2p.py 1.0
  #  (documentation at http://freedom-to-tinker.com/tinyp2p.html)
  # (C) 2004, E.W. Felten
  # license: http://creativecommons.org/licenses/by-nc-sa/2.0
  import sys, os, SimpleXMLRPCServer, xmlrpclib, re, hmac
  ar,pw,res = (sys.argv,lambda u:hmac.new(sys.argv[1],u).hexdigest(),re.search)
  pxy,xs = (xmlrpclib.ServerProxy,SimpleXMLRPCServer.SimpleXMLRPCServer)
  def ls(p=""):
      return filter(lambda n: (p=="")or res(p,n),os.listdir(os.getcwd()))

  if ar[2]!="client":
      myU,prs,srv = ("http://"+ar[3]+":"+ar[4], ar[5:],lambda x: x.serve_forever())
  def pr(x=[]):
      return ([(y in prs) or prs.append(y) for y in x] or 1) and prs
  def c(n):
      return ((lambda f: (f.read(), f.close()))(file(n)))[0]
  f=lambda p,n,a: (p==pw(myU))and(((n==0)and pr(a))or((n==1)and [ls(a)])or c(a))
  def aug(u):
      return ((u==myU) and pr()) or pr(pxy(u).f(pw(u),0,pr([myU])))

  pr() and [aug(s) for s in aug(pr()[0])]
  (lambda sv:sv.register_function(f,"f") or srv(sv))(xs((ar[3],int(ar[4]))))
  for url in pxy(ar[3]).f(pw(ar[3]),0,[]):
      for fn in filter(lambda n:not n in ls(), (pxy(url).f(pw(url),1,ar[4]))[0]):
          (lambda fi:fi.write(pxy(url).f(pw(url),2,fn)) or fi.close())(file(fn,"wc"))
[[}]]


## click: cli intefaces [[{ui,low_code,01_PM.TODO]]
 – package for creating beautiful command line interfaces
   in a composable way with as little code as necessary.
[[}]]

## pyparsing (alt.to regex/lex/yacc) [[{parsing,grammars,01_PM.TODO]]
  - alternative approach (to traditional regex lex/yacc) creating and
  executing simple grammars constructing grammars  directly in Python code.

    [Since first writing this description of pyparsing in late 2003, this
    technique for developing parsers has become more widespread, under
    the name Parsing Expression Grammars - PEGs. See more information on
    PEGs at https://en.wikipedia.org/wiki/Parsing_expression_grammar .]

  Ex:  "Hello, World!" (or any greeting of the form "salutation, addressee!"):

  from pyparsing import Word, alphas
  greet = Word(alphas) + "," + Word(alphas) + "!"
  hello = "Hello, World!"
  print(hello, "->", greet.parseString(hello))
[[}]]

## Hydra: Complex App Config [[{devops,01_PM.TODO]]
@[https://engineering.fb.com/open-source/hydra/]
@[https://github.com/facebookresearch/hydra]
@[https://hydra.cc/]

Lightweight framework simplifying development of complex applications
, by introducing the ability to compose and override configurations.
without having to rewrite significant portions of code,
dramatically reducing boilerplate code for:
- command-line flags
- manipulating configuration files
- configuring logging.

-  Future plugins will enable launching code on AWS/...

Other features include:
- Dynamic command-line tab completion
- ability to launch applications remotely taking advantage
  of more resources than are locally available
- The ability to run multiple jobs with different arguments with a single
  command, eliminating the need for related support scripts

- already in use at Facebook to prototype complex research projects.
[[}]]


## Scrapy Web Crawler [[{io.data]]
@[https://scrapy.org/]
- framework for extracting the data from websites.

See also:
- Scrapping the web with ARMs.
@[https://dxmtechsupport.com.au/speed-test-x86-vs-arm-for-web-crawling-in-python]
[[}]]


## SQLAlchemy ORM  [[{persistence,sql,01_PM.TODO]]
@[https://www.sqlalchemy.org/]

 The main goal of SQLAlchemy is to change the way you think about databases and SQL!

- full suite of well known enterprise-level persistence patterns,
  designed for efficient and high-performing database access.

SQLALCHEMY'S PHILOSOPHY
- SQL databases behave less like object collections the more size and
  performance start to matter; object collections behave less like tables and
  rows the more abstraction starts to matter. SQLAlchemy aims to accommodate
  both of these principles.

- SQLAlchemy considers the database to be a relational algebra engine,
  not just a collection of tables. Rows can be selected from not only tables
  but also joins and other select statements; any of these units can be
  composed into a larger structure.

- SQLAlchemy's overall approach to ORM is entirely different from that of
  most other SQL / ORM tools, rooted in a so-called complimentarity- oriented
  approach; instead of hiding away SQL and object relational details behind a
  wall of automation, all processes are fully exposed within a series of
  composable, transparent tools. The library takes on the job of automating
  redundant tasks while the developer remains in control of how the database is
  organized and how SQL is constructed.


- dialects for SQLite, Postgresql, MySQL, Oracle, MS-SQL, Firebird, Sybase and others,

  sqlalchemy: What's new
- v1.4: most significant release in 10 years
  https://www.sqlalchemy.org/blog/2021/03/15/sqlalchemy-1.4.0-released/


# Jinja2 Template engine


# Falcon (Microservices) [[{serverless,web,performance,01_PM.TODO]]
https://falconframework.org/
- Falcon is a blazing fast, minimalist Python web API framework for
  building reliable app backends and microservices.
  Falcon compiles itself with Cython when available, and
  also works well with PyPy.


  s a WSGI server and performs a GET request directly on each
framework's PEP-3333 app. Requests are not sent over the network,
since the performance of a given network or web server is not related
to the performance of the WSGI frameworks themselves. Regardless,
each app parses a route template with a single embedded parameter,
reads a query parameter and a header from the request data, sets an
x-header on the response, and finally returns a 10 KiB body, randomly
generated.

  Method. 50,000 iterations were executed per trial (100,000 for the
PyPy tests), and the best time was recorded for each framework over
20 trials. The order in which the frameworks were tested was
randomized for each trial. Also, garbage collection was enabled as it
would be in a production environment, and a full collection was
forcefully triggered before each trial. Finally, results were
calculated using the Decimal class, and rounded to the nearest whole
number.

  Platform. Benchmarks were executed by running the corresponding
Docker images on a Google Compute Engine instance (Intel Skylake,
1vCPU, 2 GB RAM), running Ubuntu 18.04 with all system packages
updated to their latest versions as of May 2019. The frameworks were
tested on several different versions of Python.
                     speedup  req/sec     μs/req
    Falcon  (2.0.0)      75x  330.676       3.02
    Bottle  (0.12.16)    37x  162.274       6.16
    Werkzeug(0.15.4)     11x   47.395      21.10
    Flask (1.0.2)        8x    36.746      27.21
- Considering a move to another programming language?
  Benchmark with Falcon + PyPy first.
- Used by LinkedIn, Leadpages, Wargaming, and Rackspace rely on Falcon for critical projects.

TODO: https://dzone.com/articles/python-falcon-microservice-with-mongodb-and-docker
[[}]]


 <pre zoom labels="_PM.low_code,qa.UX,_PM.TODO">
<span title>Click cli-ui</span>
@[https://click.palletsprojects.com/en/7.x/]
"Command Line Interface Creation Kit".
## library for creating beautiful command line interfaces in
   a composable way with as little code as necessary.

<span title>Typer cli-ui</span>
https://github.com/tiangolo/typer
Typer is a library for building CLI applications that users will love
using and developers will love creating. Based on Python 3.6+ type
hints.
[[}]]


## Cosas que no sabías de Python [[{]]
https://blog.adrianistan.eu/cosas-no-sabias-python
[[}]]

## Sphinx-Doc [[{]]
http://www.sphinx-doc.org/en/master/
[[}]]

## PyPrind: Progress Indicator  [[{]]
  https://pypi.python.org/pypi/PyPrind/
[[}]]
:
## Regex  [[{]]
@[https://docs.python.org/3.6/library/re.html]
@[https://developers.google.com/edu/python/regular-expressions]
[[}]]


## Type hints [[{101,PM.TODO]]
[[}]]

## PyDantic  [[{data_management,qa,]]
https://docs.python.org/3/library/typing.html
https://pydantic-docs.helpmanual.io/
Used by Fastapi,... #fastapi_summary
* Data validation and settings management using python type annotations.
* pydantic enforces type hints at runtime, and provides user friendly
  errors when data is invalid.
[[}]]

## Python Packaging Authority (PyPA)[[{qa,devops,standards,]]
https://www.pypa.io/en/latest/
The Python Packaging Authority (PyPA) is a working group that
maintains a core set of software projects used in Python packaging.
[[}]]


https://linuxize.com/post/python-delete-files-and-directories/
______________________
https://en.wikipedia.org/wiki/ReStructuredText
reStructuredText (RST, ReST, or reST) is a file format for textual data used
primarily in the Python programming language community for technical
documentation.

It is part of the Docutils project of the Python Doc-SIG (Documentation Special
Interest Group), aimed at creating a set of tools for Python similar to Javadoc
for Java or Plain Old Documentation (pod) for Perl. Docutils can extract
comments and information from Python programs, and format them into various
forms of program documentation.[1]
________________________
https://linuxconfig.org/how-to-create-and-manipulate-tar-archives-using-python
_________________
online SymPY console:
https://live.sympy.org/
_______________________
https://medium.com/better-programming/understanding-best-practice-python-tooling-by-comparing-popular-project-templates-6eba49229106
Understanding Best Practice Python Tooling by Comparing Popular Project Templates
Use Flake8, pytest, and Sphinx in your current Python project. Also evaluate pre-commit, Black, and Pylint. For your next project, consider adding Poetry and Dependabot.
__________________
https://github.com/CCExtractor/vardbg
GitHub - CCExtractor/vardbg: A simple Python debugger and profiler that generates animated visualizations of program flow.
__________________________________
Network programming Quick Sheet:
https://www.comparitech.com/net-admin/python-network-programming-cheat-sheet/
https://cdn.comparitech.com/wp-content/uploads/2019/11/Network-Programming-with-Python-Cheat-Sheet-5.jpg
_________________________________
https://github.com/peterbrittain/asciimatics
Asciimatics is a package to help people create full-screen text UIs
(from interactive forms to ASCII animations) on any platform. It is
licensed under the Apache Software Foundation License 2.0.

"...It brings a little joy to anyone who was programming in the 80s..."

Oh and it provides a single cross-platform Python class to do
all the low-level console function you could ask for, including:

  - Coloured/styled text - including 256 colour terminals and unicode
    characters (even CJK languages)
  - Cursor positioning
  - Keyboard input (without blocking or echoing) including unicode
    support
  - Mouse input (terminal permitting)
  - Detecting and handling when the console resizes
  - Screen scraping

In addition, it provides some simple, high-level APIs to provide more
complex features including:

  - Anti-aliased ASCII line-drawing
  - Image to ASCII conversion - including JPEG and GIF formats
  - Many animation effects - e.g. sprites, particle systems, banners,
    etc.
  - Various widgets for text UIs - e.g. buttons, text boxes, radio
    buttons, etc.

- This package has been proven to work on CentOS 6 & 7, Raspbian
  (i.e. Debian wheezy), Ubuntu 14.04, Windows 7, 8 & 10, OSX
  10.11 and Android Marshmallow (courtesy of https://termux.com),
- It should also work for any other platform that provides a
  working curses implementation.
______________________
https://www.edwardtufte.com/tufte/
Edward Tufte is a statistician and artist, and Professor Emeritus of
Political Science, Statistics, and Computer Science at Yale
University. He wrote, designed, and self-published 4 classic books on
data visualization. The New York Times described ET as the "Leonardo
da Vinci of data," and Bloomberg as the "Galileo of graphics." He is
now completing a book Meaning, Space, Models, Data, Truth, and
constructing a 234-acre tree farm and sculpture park in northwest
Connecticut, which will show his artworks and remain open space in
perpetuity. He founded Graphics Press, ET Modern Gallery/Studio, and
Hogpen Hill Farms.
__________________
_____________
top like python profiler
https://jvns.ca/blog/2018/09/08/an-awesome-new-python-profiler--py-spy-/
_______________
https://www.itprotoday.com/programming-languages/python-39-brings-timely-improvements-programming-language
________________
https://github.com/robinhood/faust
Faust is a stream processing library, porting the ideas from Kafka
Streams to Python.

It is used at Robinhood to build high performance distributed systems
and real-time data pipelines that process billions of events every
day.

Faust provides both stream processing and event processing, sharing
similarity with tools such as Kafka Streams, Apache
Spark/Storm/Samza/Flink,

It does not use a DSL, it's just Python! This means you can use all
your favorite Python libraries when stream processing: NumPy,
PyTorch, Pandas, NLTK, Django, Flask, SQLAlchemy, ++
______________
QA: https://stackoverflow.com/questions/1428872/pylint-pychecker-or-pyflakes
PyChecker checks at "compile time"
______________________
https://wiki.python.org/moin/Pyrex
Pyrex is a Python-like language for rapidly and easily writing python
extension modules. It can be described as python with C data types.
With Pyrex, one can produce Python-like code that runs as fast as in
C, with easy access to C libraries and functions.

The Pyrex homepage is at http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/
________________
https://pypi.org/project/hachoir/
Hachoir is a Python library to view and edit a binary stream field by
field. In other words, Hachoir allows you to “browse” any binary
stream just like you browse directories and files.

A file is splitted in a tree of fields, where the smallest field is
just one bit. Examples of fields types: integers, strings, bits,
padding types, floats, etc. Hachoir is the French word for a meat
grinder (meat mincer), which is used by butchers to divide meat into
long tubes; Hachoir is used by computer butchers to divide binary
files into fields.
______________________
Best of the best. Spreedsheet in 4 lines.
https://code.activestate.com/recipes/langs/python/
__________________
________________________
Python, mach learning: Top 10 Python libraries of 2020 you should know about | Tryolabs Blog
https://tryolabs.com/blog/2020/12/21/top-10-python-libraries-of-2020/ 

https://github.com/urwid/urwid
___________________
The Xonsh Shell
https://xon.sh/
_______________________
Python libraries to make your code readable, reliable and maintainable | Blog isaak.dev
https://isaak.dev/2020/08/python-libraries-to-make-your-code-readable-and-maintainable
______________________
Facebook open-sources a static analyzer for Python code - Help Net Security
https://www.helpnetsecurity.com/2020/08/10/python-static-analyzer/
______________
Pylance
https://www.infoq.com/news/2020/07/pylance-visual-studio-code/
standard format for packaging and distributing type information.
https://www.python.org/dev/peps/pep-0561/
___________________
Python Backdoor, fully undetectable and rich in features | Hacker Milk
https://www.hackermilk.info/2020/06/python-backdoor-fully-undetectable-and.html?m=1 
________________
@[https://www.infoq.com/news/2021/01/google-python-atheris-fuzzing/]
Google recently announced the open-sourcing of a new fuzzy testing
engine for Python. The new fuzzer, Atheris, strives to find bugs in
Python code and native extensions in Python 2.7 and Python 3.3+.
Atheris can be used in combination with the Address Sanitizer and
Undefined Behavior Sanitizer tools that detect memory corruption bugs
and undefined behavior (e.g., buffer overflows, misaligned or null
pointers).
  import atheris
  import sys

  def TestOneInput(data):
  if data == b"bad":
  raise RuntimeError("Badness!")

  atheris.Setup(sys.argv, TestOneInput)
  atheris.Fuzz()
_______________
READ CSV:
#!/usr/bin/env python3
import csv   # ← Standard module in Python3

if __name__ == '__main__':
    with open('lotr.csv', newline='') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            print(row)
____________________________
https://pythonspeed.com/docker/
Production-ready Docker packaging for Python developers
____________________________
with open('file1', 'a') as f1:
    f1.write('...')
___________________
https://kivy.org/#home
Native UI library running on Linux, Windows, OS X,
Android, iOS, and Raspberry Pi reusing the same code.
- OpenGL ES 2 accelerated.
- native support for most inputs, protocols and devices
including WM_Touch, WM_Pen, Mac OS X Trackpad and Magic
 Mouse, Mtdev, Linux Kernel HID, TUIO.
- A multi-touch mouse simulator is included.

--------------------
https://pypi.org/project/click/
Composable command line interface toolkit
Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary. It’s the “Command Line Interface Creation Kit”. It’s highly configurable but comes with sensible defaults out of the box.
------------------------
Example of modern app (SMTP server) using
asyncio (Python 3.4+)
https://aiosmtpd.readthedocs.io/en/latest/
##################
@ma automated Python2 to 3 code translation:
https://github.com/tldr-pages/tldr/blob/master/pages/common/2to3.md
####################
https://github.com/tldr-pages/tldr/blob/master/pages/common/autoflake.md
#####################
https://eli.thegreenplace.net/tag/python
#####################
performance,standards,   id=fastapi_summary
https://github.com/tiangolo/fastapi                 @ma
- Fast: Very high performance, on par with NodeJS and Go (thanks to
 Starlette and Pydantic). One of the fastest Python frameworks
 available.
- Fast to code: Increase the speed to develop features by about 200%
  to 300%. *
- Fewer bugs: Reduce about 40% of human (developer) induced errors. *
- Intuitive: Great editor support. Completion everywhere. Less time
  debugging.
- Easy: Designed to be easy to use and learn. Less time reading docs.
- Short: Minimize code duplication. Multiple features from each
  parameter declaration. Fewer bugs.
- Robust: Get production-ready code. With automatic interactive
  documentation.
- Standards-based: Based on (and fully compatible with) the open
  standards for APIs: OpenAPI (previously known as Swagger) and JSON
  Schema.
#####################
Sql queries on CSV files with csvkit
Write SQL queries on your CSV file.My life would have been so much more easier at one of my previous jobs if I had found this back then!A python package called csvkit allows you to run SQL queries on your CSV file without having to push the data to a database.What's more, you can use it directly from your command line as well.Here are 2 simple steps to do it:1. Install the package with pip install csvkit.2. Run csvsql --query "SQL_QUERY" filename.csv on the command line.That's it!If you have a CSV and a readily available SQL and if you want to run the SQL on the data in the CSV but not push it to a DB, Csvkit is your friend!Try it out the next time you quickly want to query your CSV files!################################3Python: 30nsecs of codehttps://www.30secondsofcode.org/python/t/string/p/2
#################################
How to copy items from one DynamoDB to another DynamoDB table using Python on AWShttps://www.howtoforge.com/how-to-copy-items-from-one-dynamodb-to-another-dynamodb-table-using-python-on-aws/ 
##################################
Python: Python behind the scenes #7: how Python attributes workhttps://tenthousandmeters.com/blog/python-behind-the-scenes-7-how-python-attributes-work
#################################
Using Python for #DataScience? Here are top 10 #Python libraries you shouldn't miss in 2021! 1. streamlit (https://streamlit.io/) 2. Gradio (https://www.gradio.app/) 3. Omegaml (https://github.com/omegaml) 4. Prophet (https://lnkd.in/dxDwC6p) 5. PyCaret (https://pycaret.org/) 6. SciPy (https://www.scipy.org/) 7. Plotly (https://plotly.com/python/) 8.

Seaborn (https://lnkd.in/gwq5B47) 9. AutoViz (https://autoviz.io/) 10. Kedro (https://lnkd.in/ggZDdFB)
##########################
https://docs.aiohttp.org/en/stable/

python: Welcome to AIOHTTP — aiohttp 3.7.4.post0 documentation
##########################
https://dev.to/icncsx/pip-stuff-you-might-need-to-know-2jjb
##########################
https://dev.to/icncsx/python-packaging-sdist-vs-bdist-5ekb
##########################
https://hypothesis.readthedocs.io/en/latest/
letting you write tests that assert that something should be true for
every case, not just the ones you happen to think of.
##########################
https://docs.python.org/3/library/functions.html  @ma !!!
##########################
HTTP Client
https://opensource.com/article/22/3/python-httpx
############################
cli to UITurn Python 3 Console Program into a GUI application with one lineThis library converts your Console Applications into end-user-friendly GUI applications. It lets you focus on building robust, configurable programs in a familiar way, all without having to worry about how they will be presented to and interacted with by your average user.Gooey does its best to choose sensible defaults based on the options it finds. More in the comments.
Alt: TKinter.
___________________________
Bloomberg Open-sources Python Memory Profiler Memray
https://www.infoq.com/news/2022/04/bloomberg-memray-python-profiler/
____________________________
timetable-generator/ulaz1.txt at master · NDresevic/timetable-generatorhttps://github.com/NDresevic/timetable-generator/blob/master/test_files/ulaz1.txt
_____________________
Python, scalability: Numba: A High Performance Python Compiler
https://numba.pydata.org/
Numba translates Python functions to optimized machine code at runtime using theindustry-standard LLVM compiler library. Numba-compiled numerical algorithms in Python can approach the speeds of C or FORTRAN.You don't need to replace the Python interpreter, run a separate compilation step, or evenhave a C/C++ compiler installed. Just apply one of the Numba decorators to your Python function, and Numba does the rest.
_________________________
Python: Announcing Pylance: Fast, feature-rich language support for
Python in Visual Studio Code -
Pythonhttps://devblogs.microsoft.com/python/announcing-pylance-fast-feature-rich-language-support-for-python-in-visual-studio-code/
_________________________
Python: Turn your Python script into a command-line application | Opensource.com
https://opensource.com/article/22/7/bootstrap-python-command-line-application
___________________________
https://stackoverflow.com/questions/2349991/how-do-i-import-other-python-files

_---------------------
exaloop/codon: A high-performance, zero-overhead, extensible Python compiler using LLVMhttps://github.com/exaloop/codon
(Ver también Taichi)
_______________________________________https://python.plainenglish.io/7-best-python-data-visualization-library-you-can-use-in-your-next-project-1ee5bcd3f0ef 
_____________________________
Python 3.11 is 66% faster!!!https://www.linkedin.com/posts/itay-gabbay_python-numpy-machinelearning-activity-6990581585443991552-gH_s 
For those of you who didn't notice yet - #python 3.11 was released yesterday! The new version has many features and enhancements, like better error handling and exception verbosity, more typing capabilities, and more. But the real killing feature is the speed. Python 3.11 comes with speed enhancements of up to 66% faster than Python 3.10!!!!!Take a look at the full benchmark here: https://lnkd.in/dm5Q_c5B
____________________________
____
https://www.linkedin.com/feed/update/activity:6977656563175952384 Shlomi Boutnaru
Shlomi BoutnaruFollowing    CTO at Rezilion1d
Linux Expert
Python - CPython vs PyPyThe most used reference implementation is for Python, probably CPython. It is written in C and Python and includes an interpreter and a compiler (for Python bytecode). There is no built-in JIT (Just in Time Compiling) for CPython (meaning it does not compile the code to machine instructions for a specific CPU). 
On the other hand, there is PyPy which is another implementation of Python that supports JIT (and thus is faster - look at the example shown in the screenshot below). Based on different benchmarks done by the PyPy team it seems that it is 4.7X faster than CPython (https://speed.pypy.org/). 
The crazy thing about it is that you don’t need to rewrite the code. The only thing that needs to be done is to replace CPython with PyPy. It is important to know that PyPy supports most of the tools that are part of the “Python Ecosystems”. Examples for that are pip (package manager) and virtualenv (Python’s virtual environment). Even most of the Python packages are supported - but not all of them (you can see a list of supported packages by PyPy in the following link - http://packages.pypy.org/). 
Also, the way in which PyPy resembles HotSpot (Java Virtual Machine JIT engine). It uses the dynamic information from the execution of the Python code in order to identify things like the types of objects being in use (and based on that optimizes the compiled code). Let’s say we have a function that uses only two types of objects, then PyPy can create machine code that handles only them.
Moreover, you should remember that PyPy is not a “Python Compiler” and does not support AOT (a head of time compilation). If you want to learn more about a “Python Compiler” checkout “Numba” (https://numba.pydata.org/).
Finally, there is also Pyjion which based on its website is “A drop-in JIT Compiler for Python 3.10” (https://www.trypyjion.com/). We will be covering it on a separate writeup. See you next time ;-).
You can follow me on twitter - @boutnaru (https://lnkd.in/dkYSgHHZ). Also, you can read all my writeups on medium (https://lnkd.in/drU__sCj).

