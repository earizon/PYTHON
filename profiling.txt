# profiling [[{]]
  %timeit
Simple way to time small bits of Python code
<https://docs.python.org/3/library/timeit.html>
$ python3 -m timeit '"-".join(str(n) for n in range(100))'
10000 loops, best of 5: 30.2 usec per loop
$ python3 -m timeit '"-".join([str(n) for n in range(100)])'
10000 loops, best of 5: 27.5 usec per loop
$ python3 -m timeit '"-".join(map(str, range(100)))'
10000 loops, best of 5: 23.2 usec per loop

import timeit
timeit functImplementation1()
1000 loops, best of 3: 322 us per loop
%timeit functImplementation2()
1000 loops, best of 3:   1 us per loop
[[}]]


